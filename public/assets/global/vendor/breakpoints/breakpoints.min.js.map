{"version":3,"sources":["breakpoints.es.js"],"names":["global","factory","define","amd","exports","mod","breakpointsEs","this","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_classCallCheck","instance","Constructor","defineProperty","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","_typeof","Symbol","iterator","obj","defaults","xs","min","max","sm","md","lg","Infinity","util","fn","hasOwnProperty","source","property","Callbacks","list","data","one","arguments","undefined","push","splice","caller","callback","window","ChangeEvent","current","callbacks","trigger","size","previous","fire","on","add","off","empty","MediaQuery","name","media","initialize","enter","leave","mql","matchMedia","matches","addListener","removeListener","that","mqlListener","type","types","isMatched","remove","MediaBuilder","_min","_max","between","unit","get","Size","_MediaQuery","_this","getPrototypeOf","changeListener","UnionSize","_MediaQuery2","names","sizes","split","Breakpoints$1","join","unionSizes","Breakpoints","_len","args","Array","_key","apply","version","defined","values","options","destroy","set","is","breakpoint","all"],"mappings":"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","file":"breakpoints.min.js","sourcesContent":["/**\n* breakpoints-js v1.0.6\n* https://github.com/amazingSurge/breakpoints-js\n*\n* Copyright (c) amazingSurge\n* Released under the LGPL-3.0 license\n*/\nvar defaults = {\n  // Extra small devices (phones)\n  xs: {\n    min: 0,\n    max: 767\n  },\n  // Small devices (tablets)\n  sm: {\n    min: 768,\n    max: 991\n  },\n  // Medium devices (desktops)\n  md: {\n    min: 992,\n    max: 1199\n  },\n  // Large devices (large desktops)\n  lg: {\n    min: 1200,\n    max: Infinity\n  }\n};\n\nvar util = {\n  each: function(obj, fn) {\n    let continues;\n\n    for (let i in obj) {\n      if (typeof obj !== 'object' || obj.hasOwnProperty(i)) {\n        continues = fn(i, obj[i]);\n        if (continues === false) {\n          break; //allow early exit\n        }\n      }\n    }\n  },\n\n  isFunction: function (obj) {\n    return typeof obj === 'function' || false;\n  },\n\n  extend: function(obj, source) {\n    for (let property in source) {\n        obj[property] = source[property];\n    }\n    return obj;\n  }\n};\n\nclass Callbacks {\n  constructor(){\n    this.length = 0;\n    this.list = [];\n  }\n\n  add(fn, data, one = false) {\n    this.list.push({\n      fn,\n      data: data,\n      one: one\n    });\n\n    this.length++;\n  }\n\n  remove(fn) {\n    for (let i = 0; i < this.list.length; i++) {\n      if (this.list[i].fn === fn) {\n        this.list.splice(i, 1);\n        this.length--;\n        i--;\n      }\n    }\n  }\n\n  empty() {\n    this.list = [];\n    this.length = 0;\n  }\n\n  call(caller, i, fn = null) {\n    if (!i) {\n      i = this.length - 1;\n    }\n    let callback = this.list[i];\n\n    if (util.isFunction(fn)) {\n      fn.call(this, caller, callback, i);\n    } else if (util.isFunction(callback.fn)) {\n      callback.fn.call(caller || window, callback.data);\n    }\n\n    if (callback.one) {\n      delete this.list[i];\n      this.length--;\n    }\n  }\n\n  fire(caller, fn = null) {\n    for (let i in this.list) {\n      if(this.list.hasOwnProperty(i)){\n        this.call(caller, i, fn);\n      }\n    }\n  }\n}\n\nvar ChangeEvent = {\n  current: null,\n  callbacks: new Callbacks(),\n  trigger(size) {\n    let previous = this.current;\n    this.current = size;\n    this.callbacks.fire(size, (caller, callback) => {\n      if (util.isFunction(callback.fn)) {\n        callback.fn.call({\n          current: size,\n          previous\n        }, callback.data);\n      }\n    });\n  },\n  one(data, fn) {\n    return this.on(data, fn, true);\n  },\n  on(data, fn, /*INTERNAL*/ one = false) {\n    if (typeof fn === 'undefined' && util.isFunction(data)) {\n      fn = data;\n      data = undefined;\n    }\n    if (util.isFunction(fn)) {\n      this.callbacks.add(fn, data, one);\n    }\n  },\n  off(fn) {\n    if (typeof fn === 'undefined') {\n      this.callbacks.empty();\n    }\n  }\n};\n\nclass MediaQuery {\n  constructor(name, media) {\n    this.name = name;\n    this.media = media;\n\n    this.initialize();\n  }\n\n  initialize() {\n    this.callbacks = {\n      enter: new Callbacks(),\n      leave: new Callbacks()\n    };\n\n    this.mql = (window.matchMedia && window.matchMedia(this.media)) || {\n      matches: false,\n      media: this.media,\n      addListener: function() {\n        // do nothing\n      },\n      removeListener: function() {\n        // do nothing\n      }\n    };\n\n    const that = this;\n    this.mqlListener = mql => {\n      const type = (mql.matches && 'enter') || 'leave';\n\n      that.callbacks[type].fire(that);\n    };\n    this.mql.addListener(this.mqlListener);\n  }\n\n  on(types, data, fn, one = false) {\n    if (typeof types === 'object') {\n      for (let type in types) {\n        if(types.hasOwnProperty(type)){\n          this.on(type, data, types[type], one);\n        }\n      }\n      return this;\n    }\n\n    if (typeof fn === 'undefined' && util.isFunction(data)) {\n      fn = data;\n      data = undefined;\n    }\n\n    if (!util.isFunction(fn)) {\n      return this;\n    }\n\n    if (typeof this.callbacks[types] !== 'undefined') {\n      this.callbacks[types].add(fn, data, one);\n\n      if (types === 'enter' && this.isMatched()) {\n        this.callbacks[types].call(this);\n      }\n    }\n\n\n    return this;\n  }\n\n  one(types, data, fn) {\n    return this.on(types, data, fn, true);\n  }\n\n  off(types, fn) {\n    let type;\n\n    if (typeof types === 'object') {\n      for (type in types) {\n        if(types.hasOwnProperty(type)){\n          this.off(type, types[type]);\n        }\n      }\n      return this;\n    }\n\n    if (typeof types === 'undefined') {\n      this.callbacks.enter.empty();\n      this.callbacks.leave.empty();\n    } else if (types in this.callbacks) {\n      if (fn) {\n        this.callbacks[types].remove(fn);\n      } else {\n        this.callbacks[types].empty();\n      }\n    }\n\n    return this;\n  }\n\n  isMatched() {\n    return this.mql.matches;\n  }\n\n  destroy() {\n    this.off();\n  }\n}\n\nvar MediaBuilder = {\n  min: function(min, unit = 'px') {\n    return `(min-width: ${min}${unit})`;\n  },\n  max: function(max, unit = 'px') {\n    return `(max-width: ${max}${unit})`;\n  },\n  between: function(min, max, unit = 'px') {\n    return `(min-width: ${min}${unit}) and (max-width: ${max}${unit})`;\n  },\n  get: function(min, max, unit = 'px') {\n    if (min === 0) {\n      return this.max(max, unit);\n    }\n    if (max === Infinity) {\n      return this.min(min, unit);\n    }\n    return this.between(min, max, unit);\n  }\n};\n\nclass Size extends MediaQuery {\n  constructor(name, min = 0, max = Infinity, unit = 'px') {\n    let media = MediaBuilder.get(min, max, unit);\n    super(name, media);\n\n    this.min = min;\n    this.max = max;\n    this.unit = unit;\n\n    const that = this;\n    this.changeListener = () => {\n      if (that.isMatched()) {\n        ChangeEvent.trigger(that);\n      }\n    };\n    if (this.isMatched()) {\n      ChangeEvent.current = this;\n    }\n\n    this.mql.addListener(this.changeListener);\n  }\n\n  destroy() {\n    this.off();\n    this.mql.removeListener(this.changeListener);\n  }\n}\n\nclass UnionSize extends MediaQuery {\n  constructor(names) {\n    let sizes = [];\n    let media = [];\n\n    util.each(names.split(' '), (i, name) => {\n      let size = Breakpoints$1.get(name);\n      if(size){\n        sizes.push(size);\n        media.push(size.media);\n      }\n    });\n\n    super(names, media.join(','));\n  }\n}\n\nvar info = {\n  version:\"1.0.6\"\n};\n\nlet sizes = {};\nlet unionSizes = {};\n\nlet Breakpoints = window.Breakpoints = function(...args) {\n  Breakpoints.define.apply(Breakpoints, args);\n};\n\nBreakpoints.defaults = defaults;\n\nBreakpoints = util.extend(Breakpoints, {\n  version: info.version,\n  defined: false,\n  define(values, options = {}) {\n    if (this.defined) {\n      this.destroy();\n    }\n\n    if (!values) {\n      values = Breakpoints.defaults;\n    }\n\n    this.options = util.extend(options, {\n      unit: 'px'\n    });\n\n    for (let size in values) {\n      if(values.hasOwnProperty(size)){\n        this.set(size, values[size].min, values[size].max, this.options.unit);\n      }\n    }\n\n    this.defined = true;\n  },\n\n  destroy() {\n    util.each(sizes, (name, size) => {\n      size.destroy();\n    });\n    sizes = {};\n    ChangeEvent.current = null;\n  },\n\n  is(size) {\n    const breakpoint = this.get(size);\n    if (!breakpoint) {\n      return null;\n    }\n\n    return breakpoint.isMatched();\n  },\n\n  /* get all size name */\n  all() {\n    let names = [];\n    util.each(sizes, name => {\n      names.push(name);\n    });\n    return names;\n  },\n\n  set: function(name, min = 0, max = Infinity, unit = 'px') {\n    let size = this.get(name);\n    if (size) {\n      size.destroy();\n    }\n\n    sizes[name] = new Size(name, min, max, unit);\n    return sizes[name];\n  },\n\n  get: function(size) {\n    if (sizes.hasOwnProperty(size)) {\n      return sizes[size];\n    }\n\n    return null;\n  },\n\n  getUnion(sizes) {\n    if(unionSizes.hasOwnProperty(sizes)) {\n      return unionSizes[sizes];\n    }\n\n    unionSizes[sizes] = new UnionSize(sizes);\n\n    return unionSizes[sizes];\n  },\n\n  getMin(size) {\n    const obj = this.get(size);\n    if (obj) {\n      return obj.min;\n    }\n    return null;\n  },\n\n  getMax(size) {\n    const obj = this.get(size);\n    if (obj) {\n      return obj.max;\n    }\n    return null;\n  },\n\n  current() {\n    return ChangeEvent.current;\n  },\n\n  getMedia(size) {\n    const obj = this.get(size);\n    if (obj) {\n      return obj.media;\n    }\n    return null;\n  },\n\n  on(sizes, types, data, fn, /*INTERNAL*/ one = false) {\n    sizes = sizes.trim();\n\n    if (sizes === 'change') {\n      fn = data;\n      data = types;\n      return ChangeEvent.on(data, fn, one);\n    }\n    if(sizes.includes(' ')){\n      let union = this.getUnion(sizes);\n\n      if (union) {\n         union.on(types, data, fn, one);\n      }\n    } else {\n      let size = this.get(sizes);\n\n      if (size) {\n        size.on(types, data, fn, one);\n      }\n    }\n\n    return this;\n  },\n\n  one(sizes, types, data, fn) {\n    return this.on(sizes, types, data, fn, true);\n  },\n\n  off(sizes, types, fn) {\n    sizes = sizes.trim();\n\n    if (sizes === 'change') {\n      return ChangeEvent.off(types);\n    }\n\n    if(sizes.includes(' ')){\n      let union = this.getUnion(sizes);\n\n      if (union) {\n        union.off(types, fn);\n      }\n    } else {\n      let size = this.get(sizes);\n\n      if (size) {\n        size.off(types, fn);\n      }\n    }\n\n    return this;\n  }\n});\n\nvar Breakpoints$1 = Breakpoints;\n\nexport default Breakpoints$1;\n"]}